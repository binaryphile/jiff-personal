#!/usr/bin/env bash
# Usage: jiff show mysql slave <SLAVE>

source stdlib
source arraylib
source uilib

set_default "DefaultsFile" "/opt/app/avwobt4/etc/mysql/replication.cnf"
set_default "MysqlPort" "3306"

declare -r MysqlCommand="mysql --defaults-extra-file=${DefaultsFile}"

main () {
  local command

  command="${1:-}"
  shift
  is_not_empty "${command}" || exit 1
  case "${command}" in
    "slave" )
      show_slave "$@"
  esac
}

show_slave () {
  local server

  server="${1:-}"
  is_not_empty "${server}" || exit 1
  analyze_and_report "${server}"
}

analyze_and_report () {
  local response
  local master_host
  local master_port
  local master_logfile
  local master_binlog
  local master_position
  local read_master_log_pos
  local slave_io_running
  local slave_sql_running
  local lag

  response="$(query_slave "$1")"
  master_host="$(parse_value "${response}" "Master_Host")"
  master_port="$(parse_value "${response}" "Master_Port")"
  master_logfile="$(parse_value "${response}" "Master_Log_File")"
  read_master_log_pos="$(parse_value "${response}" "Read_Master_Log_Pos")"
  slave_io_running="$(parse_value "${response}" "Slave_IO_Running")"
  slave_sql_running="$(parse_value "${response}" "Slave_SQL_Running")"

  analyze_io "${slave_io_running}"
  analyze_replication "${slave_sql_running}"

  response="$(query_master "${master_host}" "${master_port}")"
  master_binlog="$(parse_value "${response}" "File")"
  master_position="$(parse_value "${response}" "Position")"

  analyze_binlog "${master_logfile}" "${master_binlog}"
  lag="$(determine_lag "${master_position}" "${read_master_log_pos}")"
  analyze_lag "${lag}"
  success_message "${master_logfile}" "${read_master_log_pos}"
}

analyze_binlog () {
  if is_not_match "$1" "$2"; then
    echo "master binlog ($1) and master_logfile ($2) differ"
    return 1
  fi
}

analyze_io () {
  if is_match "$1" "No";  then
    echo "Replication is stopped"
    return 1
  fi
}

analyze_lag () {
  if [[ "$1" -gt 1000 ]]; then
    echo "The slave is lagging behind by $1"
    return 1
  fi
}

analyze_replication () {
  if is_match "$1" "No"; then
    echo "Replication (SQL) is stopped"
    return 1
  fi
}

determine_lag () {
  echo "$1-${read_master_log_pos}" | bc
}

parse_value () {
  echo "$1" | grep -w "$2" | awk '{print $2}'
}

query_master () {
  ${MysqlCommand} -h "$1" -P "$2" -e 'SHOW MASTER STATUS\G'
}

query_slave () {
  $MysqlCommand -h "$1" -P "${MysqlPort}" -e 'SHOW SLAVE STATUS\G'
}

success_message () {
  echo "Replication OK"
  printf "file: %s at %'d\n" "$1" "$2"
}

return 0 2>/dev/null || true
strict_mode on
main "$@"
