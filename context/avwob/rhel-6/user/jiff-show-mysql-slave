#!/usr/bin/env bash
# Usage: jiff show-mysql-slave

source stdlib
source arraylib

set_default DefaultsFile=/opt/app/avwobt4/etc/mysql/replication.cnf
set_default Port=3306

declare -r MysqlCommand="mysql --defaults-extra-file=${DefaultsFile}"

main () {
  match "${1}" "status" || exit 1
  is_not_empty "${2}" || exit 1
  analyze_and_report "${2}"
}

analyze_and_report () {
  local lag
  local response
  local master_host
  local master_port
  local master_logfile
  local read_master_log_pos
  local slave_io_running
  local slave_sql_running

  response="$(query_slave "${2}")"
  master_host="$(parse_value "${response}" "Master_Host")"
  master_port="$(parse_value "${response}" "Master_Port")"
  master_logfile="$(parse_value "${response}" "Master_Log_File")"
  read_master_log_pos="$(parse_value "${response}" "Read_Master_Log_Pos")"
  slave_io_running="$(parse_value "${response}" "Slave_IO_Running")"
  slave_sql_running="$(parse_value "${response}" "Slave_SQL_Running")"

  response="$(query_master "${master_host}" "${master_port}")"
  master_binlog="$(parse_value "${response}" "File")"
  master_position="$(parse_value "${response}" "Position")"
  match "${master_binlog}" "${master_logfile}" || echoerr "master binlog ($master_binlog) and master_logfile ($master_logfile) differ"
  lag="$(difference)"
}

parse_value () {
  echo "${1}" | grep -w "${2}" | awk '{print $2}'
}

  MasterPosition=$(parse_value mstatus Position )

query_master () {
  ${MysqlCommand} -h "${1}" -P "${2}" -e 'SHOW MASTER STATUS\G'
}

query_slave () {
  $MysqlCommand -h "${1}" -P "${Port}"-e 'SHOW SLAVE STATUS\G'
}

determine_lag () {
  echo ${MasterPosition}-$read_master_log_pos | bc
}

analyze_lag () {
  local pos_difference

  pos_difference=$(echo ${MasterPosition}-$read_master_log_pos|bc)

  if [[ $pos_difference -gt 1000 ]]; then
    errors[$error_count]="The slave is lagging behind of $pos_difference"
    error_count=$(($error_count+1))
  fi
}

analyze_io () {
  if [[ "$slave_io_running" == "No" ]]; then
    errors[$error_count]="Replication is stopped"
    error_count=$(($error_count+1))
  fi
}

analyze_replication () {
  if [[ "$slave_sql_running" == "No" ]]; then
    errors[$error_count]="Replication (SQL) is stopped"
    error_count=$(($error_count+1))
  fi
}

report_status () {
  if [[ $error_count -gt 0 ]]; then
    while [ "$count" != "$error_count" ]
    do
      echo "${errors[$CNT]}"
      count=$(($count+1))
    done
  else
    echo "Replication OK"
    printf "file: %s at %'d\n" $master_logfile  $read_master_log_pos
  fi
}

return 0 2>/dev/null || true
strict_mode on
main "${@}"
